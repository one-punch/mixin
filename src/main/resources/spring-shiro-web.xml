<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd 
    http://www.springframework.org/schema/context   
    http://www.springframework.org/schema/context/spring-context.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 缓存管理器 使用Ehcache实现 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>

    <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher" class="com.wteam.mixin.shiro.RetryLimitHashedCredentialsMatcher">
        <constructor-arg ref="cacheManager"/>
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="2"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>

    <!-- Realm实现 -->
 	<bean id="customRealm" class="com.wteam.mixin.shiro.CustomRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
        <property name="cachingEnabled" value="true"/>
        <property name="authenticationCachingEnabled" value="false"/>
        <property name="authenticationCacheName" value="authenticationCache"/>
        <property name="authorizationCachingEnabled" value="true"/>
        <property name="authorizationCacheName" value="authorizationCache"/>
    </bean>
    
    <!-- 自定义权限解析器 -->
    <bean id="customUrlPermissonResovler" class="com.wteam.mixin.shiro.CustomUrlPermissonResovler"></bean>
    
    <!-- 会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- session的失效时长，单位毫秒 -->
        <property name="globalSessionTimeout" value="1800000"/>
        <!-- 删除失效的session -->
        <property name="deleteInvalidSessions" value="true"/>
    </bean>
    
    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="customRealm"/>
        <!-- 注入session管理器 -->
        <property name="sessionManager" ref="sessionManager" />
        <property name="cacheManager" ref="cacheManager"/>
        <property name="authorizer.permissionResolver" ref="customUrlPermissonResovler"/>
    </bean>

    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

     <!-- 自定义权限过滤器 -->
     <bean id="customPermissionCheckFilter"
        class="com.wteam.mixin.shiro.CustomPermissionCheckFilter">
        <!-- 未认证跳转的url -->
        <property name="unauthenticatedUrl" value="sessionTimeOutResponse" />
        <!-- 认证通过无访问权限跳转的url -->
        <property name="unauthorizedUrl" value="unauthorized" />
<!--         <property name="urlWithoutPermission">
        </property> -->
     </bean>
     
    <!-- Shiro的Web过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!-- 规定登陆的url -->
        <property name="loginUrl" value="/login"/>
        <!-- 规定登陆失败的url -->
        <property name="unauthorizedUrl" value="/loginFail"/>
        <property name="filters">
            <map>
                <entry key="cuspc" value-ref="customPermissionCheckFilter"/>
            </map>
        </property>
		<!-- 用于声明url和filter的关系 -->
        <property name="filterChainDefinitions">
            <value>
                /** = cuspc
            </value>
        </property>
    </bean>

    <!-- Shiro生命周期处理器-->
<!--     <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
 -->
</beans>